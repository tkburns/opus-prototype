(*
  A cursory overview of all opus's syntax
*)

(*
  a semicolon is required between each declaration/expression in the same block
  otherwise it will parsed together as one declaration/expression
*)

(* ------------------- *)
(* literals *)

boolean = true; (* or `false` *)
number = 12;
atom = :hello;
text = "hello world";

tuple = (atom, text);

(* ------------------- *)
(* functions *)

pair = a => b => (a, b);

pair 1 2;
(* = (1, 2) *)

pair (pair 1 2) (pair 3 4);
(* = ((1, 2), (3, 4)) *)

(* you can also create & call anonymous functions inline *)
(a => b => (b, a)) 1 2; 
(* = (2, 1) *)

(* ------------------- *)
(* pattern matches *)

message = name => name match (
  :hello => "hello world";
  :bye => "bye everyone";
  _ => "other";
);

compare = a => b => a match (
  b => :eq;
  _ | a < b => :lt;
  _ | a > b => :gt;
)

(* ------------------- *)
(* effects & handlers *)

yield = effect;

numsGenerator = start => end => start match (
  _ | start < end => (
    !(yield start);
    numsGenerator (start + 1) end;
  );
  _ => ()
);

collect = handler (
  yield v k => (v, k ());
  final _ => ();
);

nums = numsGenerator 1 3 with collect;
(* nums = (1, (2, (3, ()))) *)


(* print is a builtin effect for writing output *)
log = x => (
  !(print x);
  x
);

log "foo";  (* uses default/builtin handler - prints to stdout *)

log "foo" with
  IO.file.write "./foo.txt";
(* uses builtin file IO handler - prints to file *)

(* can create a handler inline *)
log "foo" with handler (
  print msg k => (msg, k ());
  final => ();
);
(* collects all logs into a linked list & returns it *)

(* ------------------- *)
(* thunks *)

(*
  thunks are delayed computations (analogous to functions taking () as the only argument)
  they can be forced/evaluated with `!`
*)

(* the default handler for `random` effect returns a number between two given numbers *)

coinFlip = { (!random (1, 2)) == 1 }

allHeads = n => n match (
  0 => true;
  _ => !coinFlip && allHeads (n - 1);
);

allHeads 2;  (* uses builtin random effect handler *)

allHeads 4 with handler (
  random (min, max) k => k max;
);  (* always true *)

(* ------------------- *)
(* precedence *)

a = :a; b = :b; c = :c; d = :d;
f = x => x; g = x => x;

x => a match (_ => y => b) (z => c) (d, f x);
(* is parsed as:
  x => (
    (
      (
        a match (_ => y => b)
      ) (z => c)
    ) (d, (f x))
  );
*)

x => x match (_ => x);    (* x => (x match (_ => x)) *)
x => f x;                 (* x => (f x) *)

f b match (_ => a);       (* (f b) match (_ => a) *)

f g a;                    (* (f g) a *)
f (g a);                  (* f (g a) *)

(x => a, y => b);         (* ((x => a), (y => b)) *)
(a match (_ => a), f a);  (* (a match (_ => a), f a) *)
